var request = require('request');

/**
 * Create a new bot instance
 *
 * @constructor
 * @param {integer} bot_id The ID generated by Telegram
 */
function TelegramBot(bot_id) {
    this.bot_id = bot_id;
}

// Telegram API endpoint
TelegramBot.ENDPOINT = "https://api.telegram.org";

/**
 * Create new error object. Convenience method.
 *
 * @param {string}  message The error message
 * @param {integer} code    The error code
 *
 * @return {Error} The new Error object.
 */
TelegramBot.error = function (message, code) {
    var err = new Error(message);
    err.code = code;
    return err;
}

/**
 * This function will unwrap a Telegram response and send the appropriate
 * data values back to the callback specified by the user.
 *
 * @param {function} cb The callback function
 *
 * @return {function} The wrapped callback
 */
TelegramBot.unwrap = function(cb) {
    var self = this;

    // Return the wrapped callback function
    return function (err, res, body) {
        // Handle transport and potential Telegram errors
        // by passing the error object as the first parameter.
        if (res.statusCode != 200) err = 'HTTP status ' + res.statusCode + ' returned.';
        if (!err && typeof body !== 'undefined' && !body.ok) err = TelegramBot.error(body.description, body.error_code);
        if (err) return cb.apply(self, [err]);

        cb.apply(self, [null, body.result]);
    }
}

/**
 * Run a request against the Telegram API
 *
 * @param {integer}  id     The bot ID
 * @param {string}   method The request method
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot} The wrapped callback
 */
TelegramBot.request = function(id, method, opts, cb) {

    var settings = {
        url: TelegramBot.ENDPOINT + '/bot' + id + '/' + method,
        json: true
    };

    // Assign the form data only if it is popualted
    if (Object.keys(opts).length) settings.formData = opts;

    request.post(settings, TelegramBot.unwrap(cb));
    return this;
}

/**
 * Invoke an API request
 *
 * @param {string}   method The request method
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot} The wrapped callback
 */
TelegramBot.prototype.invoke = function(method, opts, cb) {
    return TelegramBot.request.apply(this, [this.bot_id, method, opts, cb]);
}

module.exports = TelegramBot;